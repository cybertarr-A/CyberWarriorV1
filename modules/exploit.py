# modules/exploit.py

import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import socket
import threading
from utils.logger import log

class ExploitResult:
    def __init__(self, findings=None):
        self.findings = findings or []

class ExploitEngine:
    def __init__(self):
        self.session = requests.Session()
        print("ExploitEngine initialized")

    def is_vulnerable_to_sql_injection(self, url):
        try:
            payload = "' OR '1'='1"
            full_url = url + payload
            response = self.session.get(full_url)
            if "sql" in response.text.lower() or "mysql" in response.text.lower():
                log.info(f"[!] SQL Injection vulnerability detected at: {url}")
                return True
        except Exception as e:
            log.error(f"[ERROR] SQL Injection check failed for {url}: {e}")
        return False

    def check_xss(self, url):
        try:
            payload = "<script>alert('XSS')</script>"
            full_url = f"{url}?q={payload}"
            response = self.session.get(full_url)
            if payload in response.text:
                log.info(f"[!] XSS vulnerability detected at: {url}")
                return True
        except Exception as e:
            log.error(f"[ERROR] XSS check failed for {url}: {e}")
        return False

    def check_open_redirect(self, url):
        try:
            payload = "http://evil.com"
            full_url = f"{url}?redirect={payload}"
            response = self.session.get(full_url, allow_redirects=False)
            if response.status_code in [301, 302] and response.headers.get('Location') == payload:
                log.info(f"[!] Open Redirect vulnerability detected at: {url}")
                return True
        except Exception as e:
            log.error(f"[ERROR] Open Redirect check failed for {url}: {e}")
        return False

    def fingerprint_technologies(self, url):
        try:
            response = self.session.get(url)
            headers = response.headers
            tech = []

            if "X-Powered-By" in headers:
                tech.append(headers["X-Powered-By"])
            if "Server" in headers:
                tech.append(headers["Server"])
            if "Set-Cookie" in headers:
                cookies = headers["Set-Cookie"]
                if "PHPSESSID" in cookies:
                    tech.append("PHP")
                if "ASP.NET" in cookies:
                    tech.append("ASP.NET")

            log.info(f"[+] Technologies detected on {url}: {', '.join(tech) if tech else 'Unknown'}")
            return tech
        except Exception as e:
            log.error(f"[ERROR] Fingerprinting failed for {url}: {e}")
            return []

    def crawl_and_find_forms(self, url):
        forms = []
        try:
            response = self.session.get(url)
            soup = BeautifulSoup(response.text, "html.parser")
            forms = soup.find_all("form")
            log.info(f"[+] Found {len(forms)} forms at {url}")
        except Exception as e:
            log.error(f"[ERROR] Crawling and form detection failed for {url}: {e}")
        return forms

    def scan_ports(self, host):
        open_ports = []
        common_ports = [21, 22, 23, 25, 53, 80, 110, 139, 143, 443, 445, 3389]

        def scan(port):
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                try:
                    s.connect((host, port))
                    open_ports.append(port)
                    log.info(f"[+] Port {port} is open on {host}")
                except:
                    pass

        threads = []
        for port in common_ports:
            t = threading.Thread(target=scan, args=(port,))
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

        return open_ports

    def exploit_target(self, target_url):
        log.info(f"[+] Starting Exploitation Phase for {target_url}")
        findings = []

        techs = self.fingerprint_technologies(target_url)
        if techs:
            findings.append(f"Technologies: {', '.join(techs)}")

        if self.is_vulnerable_to_sql_injection(target_url):
            findings.append("SQL Injection vulnerability detected.")

        if self.check_xss(target_url):
            findings.append("XSS vulnerability detected.")

        if self.check_open_redirect(target_url):
            findings.append("Open Redirect vulnerability detected.")

        forms = self.crawl_and_find_forms(target_url)
        findings.append(f"Found {len(forms)} HTML forms.")

        try:
            host = target_url.split("//")[-1].split("/")[0]
            open_ports = self.scan_ports(host)
            findings.append(f"Open ports: {open_ports}")
        except Exception as e:
            log.error(f"[ERROR] Could not extract host from URL: {e}")

        return ExploitResult(findings=findings)

def run_exploit(target):
    engine = ExploitEngine()
    return engine.exploit_target(target)
